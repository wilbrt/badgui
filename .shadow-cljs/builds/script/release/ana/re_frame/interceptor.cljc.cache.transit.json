["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\r\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\r\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\r\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\r\n});\r\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___9461 = arguments.length;\r\nvar i__4865__auto___9462 = (0);\r\nwhile(true){\r\nif((i__4865__auto___9462 < len__4864__auto___9461)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___9462]));\r\n\r\nvar G__9463 = (i__4865__auto___9462 + (1));\r\ni__4865__auto___9462 = G__9463;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\r\n});\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__9396){\r\nvar map__9397 = p__9396;\r\nvar map__9397__$1 = cljs.core.__destructure_map(map__9397);\r\nvar m = map__9397__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9397__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9397__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\r\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9397__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5751__auto___9465 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\r\nif(temp__5751__auto___9465){\r\nvar unknown_keys_9466 = temp__5751__auto___9465;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_9466], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__4253__auto__ = id;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\r\n}\r\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\r\n}));\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq9395){\r\nvar self__4852__auto__ = this;\r\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9395));\r\n}));\r\n\r\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\r\nvar G__9410 = arguments.length;\r\nswitch (G__9410) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\r\n});\r\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___9471 = arguments.length;\r\nvar i__4865__auto___9473 = (0);\r\nwhile(true){\r\nif((i__4865__auto___9473 < len__4864__auto___9471)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___9473]));\r\n\r\nvar G__9474 = (i__4865__auto___9473 + (1));\r\ni__4865__auto___9473 = G__9474;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq9419){\r\nvar G__9420 = cljs.core.first(seq9419);\r\nvar seq9419__$1 = cljs.core.next(seq9419);\r\nvar G__9421 = cljs.core.first(seq9419__$1);\r\nvar seq9419__$2 = cljs.core.next(seq9419__$1);\r\nvar G__9422 = cljs.core.first(seq9419__$2);\r\nvar seq9419__$3 = cljs.core.next(seq9419__$2);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__9420,G__9421,G__9422,seq9419__$3);\r\n}));\r\n\r\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\r\nvar G__9432 = arguments.length;\r\nswitch (G__9432) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\r\n});\r\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___9480 = arguments.length;\r\nvar i__4865__auto___9481 = (0);\r\nwhile(true){\r\nif((i__4865__auto___9481 < len__4864__auto___9480)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___9481]));\r\n\r\nvar G__9482 = (i__4865__auto___9481 + (1));\r\ni__4865__auto___9481 = G__9482;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((3) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4871__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq9437){\r\nvar G__9438 = cljs.core.first(seq9437);\r\nvar seq9437__$1 = cljs.core.next(seq9437);\r\nvar G__9439 = cljs.core.first(seq9437__$1);\r\nvar seq9437__$2 = cljs.core.next(seq9437__$1);\r\nvar G__9440 = cljs.core.first(seq9437__$2);\r\nvar seq9437__$3 = cljs.core.next(seq9437__$2);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__9438,G__9439,G__9440,seq9437__$3);\r\n}));\r\n\r\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\r\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar f = temp__5751__auto__;\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\r\n} else {\r\nreturn context;\r\n}\r\n});\r\n/**\r\n * Loop over all interceptors, calling `direction` function on each,\r\n *   threading the value of `context` through every call.\r\n * \r\n *   `direction` is one of `:before` or `:after`.\r\n * \r\n *   Each iteration, the next interceptor to process is obtained from\r\n *   context's `:queue`. After they are processed, interceptors are popped\r\n *   from `:queue` and added to `:stack`.\r\n * \r\n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n *   contain all interceptors processed.\r\n * \r\n *   Returns updated `context`. Ie. the `context` which has been threaded\r\n *   through all interceptor functions.\r\n * \r\n *   Generally speaking, an interceptor's `:before` function will (if present)\r\n *   add to a `context's` `:coeffects`, while its `:after` function\r\n *   will modify the `context`'s `:effects`.  Very approximately.\r\n * \r\n *   But because all interceptor functions are given `context`, and can\r\n *   return a modified version of it, the way is clear for an interceptor\r\n *   to introspect the stack or queue, or even modify the queue\r\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\r\n */\r\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\r\nvar context__$1 = context;\r\nwhile(true){\r\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nif(cljs.core.empty_QMARK_(queue)){\r\nreturn context__$1;\r\n} else {\r\nvar interceptor = cljs.core.peek(queue);\r\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nvar G__9483 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\r\ncontext__$1 = G__9483;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\r\n});\r\n/**\r\n * Create a fresh context\r\n */\r\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\r\nvar G__9445 = arguments.length;\r\nswitch (G__9445) {\r\ncase 2:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\r\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\r\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Called on completion of `:before` processing, this function prepares/modifies\r\n * `context` for the backwards sweep of processing in which an interceptor\r\n * chain's `:after` fns are called.\r\n * \r\n *   At this point in processing, the `:queue` is empty and `:stack` holds all\r\n *   the previously run interceptors. So this function enables the backwards walk\r\n *   by priming `:queue` with what's currently in `:stack`\r\n */\r\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\r\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\r\n});\r\n/**\r\n * Executes the given chain (coll) of interceptors.\r\n * \r\n * Each interceptor has this form:\r\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\r\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n * \r\n * Walks the queue of interceptors from beginning to end, calling the\r\n * `:before` fn on each, then reverse direction and walk backwards,\r\n * calling the `:after` fn on each.\r\n * \r\n * The last interceptor in the chain presumably wraps an event\r\n * handler fn. So the overall goal of the process is to \"handle\r\n * the given event\".\r\n * \r\n * Thread a `context` through all calls. `context` has this form:\r\n * \r\n *   {:coeffects {:event [:a-query-id :some-param]\r\n *                :db    <original contents of app-db>}\r\n *    :effects   {:db    <new value for app-db>\r\n *                :dispatch  [:an-event-id :param1]}\r\n *    :queue     <a collection of further interceptors>\r\n *    :stack     <a collection of interceptors already walked>}\r\n * \r\n * `context` has `:coeffects` and `:effects` which, if this was a web\r\n * server, would be somewhat analogous to `request` and `response`\r\n * respectively.\r\n * \r\n * `coeffects` will contain data like `event` and the initial\r\n * state of `db` -  the inputs required by the event handler\r\n * (sitting presumably on the end of the chain), while handler-returned\r\n * side effects are put into `:effects` including, but not limited to,\r\n * new values for `db`.\r\n * \r\n * The first few interceptors in a chain will likely have `:before`\r\n * functions which \"prime\" the `context` by adding the event, and\r\n * the current state of app-db into `:coeffects`. But interceptors can\r\n * add whatever they want to `:coeffects` - perhaps the event handler needs\r\n * some information from localstore, or a random number, or access to\r\n * a DataScript connection.\r\n * \r\n * Equally, some interceptors in the chain will have `:after` fn\r\n * which can process the side effects accumulated into `:effects`\r\n * including but, not limited to, updates to app-db.\r\n * \r\n * Through both stages (before and after), `context` contains a `:queue`\r\n * of interceptors yet to be processed, and a `:stack` of interceptors\r\n * already done.  In advanced cases, these values can be modified by the\r\n * functions through which the context is threaded.\r\n */\r\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__9274__auto___9485 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__9274__auto___9485);\r\n\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index","~$clojure.pprint","~$cljs.pprint","~$clojure.repl","~$cljs.repl","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^R","~$re-frame.interop","^S","~$re-frame.trace","^T","~$trace","^T","~$clojure.set","^V","~$set","^V","~$cljs.core","^X","~$goog","^Y"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^R","~$empty-queue","^S","~$debug-enabled?","^S"],"~:require-macros",["^ ","^T","^T","^U","^T","^X","^X"],"~:form",["~#list",["~$ns","^L",["^16",["^[",["^R","~:refer",["^11"]],["^S","^18",["^12","^13"]],["^T","~:as","^U","~:include-macros",true],["^V","^19","^W"]]]]],"~:flags",["^ ","^[",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^R","^S","^T","^V"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1642603901001,"^M",["^ ","^R","^R","^S","^S","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__9396","map__9397","cljs.core/--destructure-map","cljs.core.get","seq9395","self__4852__auto__","cljs.core/seq","id","before","after","re-frame.interop/debug-enabled?","temp__5751__auto__","unknown-keys","clojure.set.difference","re_frame.loggers.console","or__4253__auto__","G__9410","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq9419","G__9420","cljs.core/first","cljs.core/next","G__9421","G__9422","self__4851__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__9432","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq9437","G__9438","G__9439","G__9440","re-frame.interceptor/invoke-interceptor-fn","interceptor","direction","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__9445","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute","event-v","re-frame.trace/is-trace-enabled?","new-trace__9274__auto__","cljs.core.merge","re-frame.trace/*current-trace*","cljs.core/merge"]],"~:used-vars",["^J",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/change-direction","~$re-frame.trace/*current-trace*","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1?","reagent/impl/batching.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^Y","^X","~$reagent.debug","~$reagent.impl.util"]]],["^1?","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.dom.HtmlElement"]]],["^1?","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1?","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.asserts"]]],["^1?","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1?","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.array","~$goog.object","^2W","^2V"]]],["^1?","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2V"]]],["^1?","re_frame/loggers.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^V"]]],["^1?","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X"]]],["^1?","reagent/impl/util.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","~$clojure.string","~$clojure.walk","^30","^2S"]]],["^1?","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2W","~$goog.reflect","^2V"]]],["^1?","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.events.Event","~$goog.events.EventId"]]],["^1?","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2Y","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^3>","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1?","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","reagent/ratom.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^2T","^2S","~$reagent.impl.batching","^V","^30"]]],["^1?","re_frame/interop.cljs"],["b153aa5637718f7ef415049480b003bb00fd359b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1?","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.Disposable","^2X","^3J","^3=","^3A","^3B","^30","^3>","^3D","^3F"]]],["^1?","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1?","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2O",["^ ","^2P",3,"^2Q",["^J",[1,2]],"^2R",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1?","shadow/js.js"],["76ef36f04351d2181793e13596a9f93f0f16aa3e","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","reagent/impl/template.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[3]],"^2R",["^Y","^X","^A","^37","^2T","~$reagent.impl.component","^3H","~$reagent.impl.input","~$reagent.impl.protocols","^3L","^2S","^30"]]],["^1?","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X"]]],"~:SHADOW-TIMESTAMP",[1641542032000,1641542032000,1641542029000],["^3Q","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","754b7a48941975257c8955f6d5e511cb3a878737","^2O",["^ ","^2P",2,"^2Q",["^J",[0]],"^2R",["^3R","~$module$node_modules$object_assign$index"]]],["^1?","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","^3<"]]],["^1?","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3F","^3A"]]],["^1?","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","~$goog.fs.blob","^31","~$goog.html.SafeScript","~$goog.html.trustedtypes","^33","^34","^35","^36"]]],["^1?","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","^3G","^30","^3>","^3A","^3F"]]],["^1?","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1?","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^35","~$goog.html.SafeUrl","^36","^2X","^2V"]]],["^1?","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3[","~$goog.html.SafeStyle","^43","^32","~$goog.html.uncheckedconversions","^35","^2V"]]],["^1?","reagent/impl/component.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[3]],"^2R",["^Y","^X","^30","^A","^2T","^3H","^3W","^3L","^2S"]]],["^1?","clojure/walk.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X"]]],["^1?","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^35","^33","^34","^3[","^47","~$goog.html.SafeStyleSheet","^43","~$goog.dom.TagName","^32","^36","^2X","^39","^2[","^30","^2V","~$goog.dom.tags","^40"]]],["^1?","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^30"]]],["^1?","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","^2V","^2W"]]],["^1?","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","^2X","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4:","~$goog.dom.safe","^46","^48","~$goog.math.Coordinate","~$goog.math.Size","^30","~$goog.string","^35","~$goog.string.Unicode","^2Z"]]],["^1?","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.debug.Error","^4="]]],["^1?","reagent/impl/protocols.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X"]]],["^1?","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","^2X","~$goog.collections.maps","^4A","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^3Q","node_modules/object-assign/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","519ffd5a4c91b67302cc9947b794966d629860cd","^2O",["^ ","^2P",0,"^2Q",["^J",[]],"^2R",["^3R"]]],["^1?","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3M","^2X","~$goog.debug.EntryPointMonitor","^4C"]]],["^1?","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",[]]],["^1?","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","^30"]]],["^1?","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","clojure/string.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^4A","~$goog.string.StringBuffer"]]],["^3Q","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","0a81b45abe33f0ad39b726512604018f94261db9","^2O",["^ ","^2P",1,"^2Q",["^J",[0]],"^2R",["^3R","^3Y"]]],["^1?","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X"]]],["^1?","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^4>","^48","^35","^2V"]]],["^1?","re_frame/interceptor.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^R","^S","^T","^V"]]],["^1?","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.labs.userAgent","^2V"]]],["^1?","reagent/core.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[3]],"^2R",["^Y","^X","^A","~$reagent.impl.template","^3U","^2T","^3H","^3W","^3L","^2S"]]],["^1?","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2[","~$goog.debug.errorcontext"]]],["^1?","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.math"]]],["^1?","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3?","~$goog.dom","^4:","^45","^39","^3:"]]],["^1?","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","^46","^3[","^47","^49","^43","^32","^35","^2V","^33"]]],["^1?","reagent/impl/input.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^3U","^3H","^3W"]]],["^1?","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3M","^3>"]]],["^1?","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3M","^3J","^30","^3=","^3>","~$goog.events.EventTarget","^3E"]]],["^1?","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y"]]],["^1?","cljs/core.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.math.Long","~$goog.math.Integer","^4A","^30","^2[","~$goog.Uri","^4J"]]],["^1?","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^35","^36","^40","^2X"]]],["^1?","reagent/debug.cljs"],["ce6f8f6440a38b5c1f0e94d72353c02f59f66557","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X"]]],["^1?","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^35","^47","^36","^30","^2X","^2V"]]],["^1?","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","~$goog.debug","^3=","~$goog.events.EventType","^3<","^2Z"]]],["^1?","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3<"]]],["^1?","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2Z"]]],["^1?","clojure/set.cljs"],["78c69af9064be23a596f27f744408340fe4ca37b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X"]]],["^1?","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","^4A"]]],["^1?","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^2X","^36"]]],["^1?","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3O"]]],["^1?","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3>","^3D","^3F"]]],["^1?","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^3A"]]],["^1?","re_frame/trace.cljc"],["b153aa5637718f7ef415049480b003bb00fd359b","^2O",["^ ","^2P",null,"^2Q",["^J",[]],"^2R",["^Y","^X","^S","^R","^45"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/debug.clj",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/compiler.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64_vlq.clj",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/impl.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes/and_or.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/trace.cljc",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/interop.clj",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/re-frame/re-frame/1.2.0/re-frame-1.2.0.jar!/re_frame/interop.clj",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/analyzer/passes.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/js_deps.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map/base64.clj",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/ratom.clj",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/reagent/reagent/1.1.0/reagent-1.1.0.jar!/reagent/core.clj",1641474862000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/core.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/instant.clj",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/env.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1641292454000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/tagged_literals.cljc",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/externs.clj",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/source_map.clj",1641542029000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1641292453000,"jar:file:/C:/Users/flegmeister/.m2/repository/org/clojure/clojurescript/1.10.891/clojurescript-1.10.891.jar!/cljs/util.cljc",1641542029000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^S","^T","^T","^U","^T","^V","^V","^W","^V","^X","^X","^Y","^Y"],"^Z",["^J",["^["]],"~:shadow/js-access-global",["^J",["Error"]],"^10",["^ ","^11","^R","^12","^S","^13","^S"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",42,"^8",7,"^9",42,"^:",20,"~:arglists",["^16",["~$quote",["^16",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^16",["^5U","^5V","~$f","^5W"]]],"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]],"~:arglists-meta",["^16",[null]]]],"^K","^1W","^6","re_frame/interceptor.cljc","^:",20,"^5X",["^ ","^5Y",true,"^5Z",3,"^5[",3,"^60",[["^16",["^5U","^5V","~$f","^5W"]]],"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]],"^61",["^16",[null]]],"^60",[["^16",["^5U","^5V","~$f","^5W"]]],"~:protocol-impl",null,"^5Z",3,"^61",["^16",[null]],"^8",1,"^5Y",true,"~:methods",[["^ ","^5Z",3,"^5Y",true,"~:tag","~$any"]],"^7",42,"~:ret-tag","^65","^9",42,"^5[",3,"~:fn-var",true,"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]]],"~$invoke-interceptors",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",74,"^8",8,"^9",74,"^:",27,"~:private",true,"^5S",["^16",["^5T",["^16",[["^5U","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^69",true,"^K","^1Y","^6","re_frame/interceptor.cljc","^:",27,"^60",["^16",[["^5U","^6:"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",74,"^9",74,"^5[",2,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U","^6:"]]]]],"^6;","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",56,"^8",7,"^9",56,"^:",21,"^5S",["^16",["^5T",["^16",[["^5U","^5V","~$value"]]]]]],"^K","^2;","^6","re_frame/interceptor.cljc","^:",21,"^60",["^16",[["^5U","^5V","^6="]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",56,"^66",["^J",["~$clj","^65"]],"^9",56,"^5[",3,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U","^5V","^6="]]]]]],"~$update-coeffect",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",60,"^8",7,"^9",60,"^:",22,"^5S",["^16",["^5T",["^16",[["^5U","^5V","~$f","~$&","^5W"]]]]],"^5X",["^ ","^5Y",true,"^5Z",3,"^5[",3,"^60",[["^16",["^5U","^5V","~$f","^5W"]]],"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]],"^61",["^16",[null]]]],"^K","^28","^6","re_frame/interceptor.cljc","^:",22,"^5X",["^ ","^5Y",true,"^5Z",3,"^5[",3,"^60",[["^16",["^5U","^5V","~$f","^5W"]]],"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]],"^61",["^16",[null]]],"^60",[["^16",["^5U","^5V","~$f","^5W"]]],"^62",null,"^5Z",3,"^61",["^16",[null]],"^8",1,"^5Y",true,"^63",[["^ ","^5Z",3,"^5Y",true,"^64","^65"]],"^7",60,"^66","^65","^9",60,"^5[",3,"^67",true,"^5S",["^16",[["^5U","^5V","~$f","~$&","^5W"]]]],"~$invoke-interceptor-fn",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",67,"^8",8,"^9",67,"^:",29,"^69",true,"^5S",["^16",["^5T",["^16",[["^5U","~$interceptor","^6:"]]]]]],"^69",true,"^K","^2J","^6","re_frame/interceptor.cljc","^:",29,"^60",["^16",[["^5U","^6A","^6:"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",67,"^66",["^J",[null,"^65"]],"^9",67,"^5[",3,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U","^6A","^6:"]]]]]],"~$get-effect",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",30,"^8",7,"^9",30,"^:",17,"^5S",["^16",["^5T",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","~$not-found"]]]]],"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]],"^61",["^16",[null,null,null]]]],"^K","^1M","^6","re_frame/interceptor.cljc","^:",17,"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]],"^61",["^16",[null,null,null]]],"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^62",null,"^5Z",3,"^61",["^16",[null,null,null]],"^8",1,"^5Y",false,"^63",[["^ ","^5Z",1,"^5Y",false,"^64","^65"],["^ ","^5Z",2,"^5Y",false,"^64",["^J",[null,"^65"]]],["^ ","^5Z",3,"^5Y",false,"^64",["^J",[null,"^65"]]]],"^7",30,"^9",30,"^5[",3,"^67",true,"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]]],"~$->interceptor",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^5S",["^16",["^5T",["^16",[["~$&",["^ ","^19","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^5X",["^ ","^5Y",true,"^5Z",0,"^5[",0,"^60",[["^16",[["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]],"^5S",["^16",[["~$&",["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]],"^61",["^16",[null]]]],"^K","^1R","^6","re_frame/interceptor.cljc","^:",20,"^5X",["^ ","^5Y",true,"^5Z",0,"^5[",0,"^60",[["^16",[["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]],"^5S",["^16",[["~$&",["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]],"^61",["^16",[null]]],"^60",[["^16",[["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]],"^62",null,"^5Z",0,"^61",["^16",[null]],"^8",1,"^5Y",true,"^63",[["^ ","^5Z",0,"^5Y",true,"^64","~$cljs.core/IMap"]],"^7",17,"^66","^65","^9",17,"^5[",0,"^67",true,"^5S",["^16",[["~$&",["^ ","^19","~$m","^6E",["^6F","^6G","^6H"]]]]]],"~$get-coeffect",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",48,"^8",7,"^9",48,"^:",19,"^5S",["^16",["^5T",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]]]],"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]],"^61",["^16",[null,null,null]]]],"^K","^2@","^6","re_frame/interceptor.cljc","^:",19,"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]],"^61",["^16",[null,null,null]]],"^60",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]],"^62",null,"^5Z",3,"^61",["^16",[null,null,null]],"^8",1,"^5Y",false,"^63",[["^ ","^5Z",1,"^5Y",false,"^64","^65"],["^ ","^5Z",2,"^5Y",false,"^64",["^J",[null,"^65"]]],["^ ","^5Z",3,"^5Y",false,"^64",["^J",[null,"^65"]]]],"^7",48,"^9",48,"^5[",3,"^67",true,"^5S",["^16",[["^5U"],["^5U","^5V"],["^5U","^5V","^6C"]]]],"~$execute",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^5S",["^16",["^5T",["^16",[["~$event-v","~$interceptors"]]]]],"^6;","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","^1P","^6","re_frame/interceptor.cljc","^:",14,"^60",["^16",[["^6L","^6M"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",146,"^66","^65","^9",146,"^5[",2,"^67",true,"^5S",["^16",["^5T",["^16",[["^6L","^6M"]]]]],"^6;","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",38,"^8",7,"^9",38,"^:",19,"^5S",["^16",["^5T",["^16",[["^5U","^5V","^6="]]]]]],"^K","^2B","^6","re_frame/interceptor.cljc","^:",19,"^60",["^16",[["^5U","^5V","^6="]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",38,"^66",["^J",["^6>","^65"]],"^9",38,"^5[",3,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U","^5V","^6="]]]]]],"~$enqueue",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",111,"^8",7,"^9",111,"^:",14,"^5S",["^16",["^5T",["^16",[["^5U","^6M"]]]]]],"^K","^20","^6","re_frame/interceptor.cljc","^:",14,"^60",["^16",[["^5U","^6M"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",111,"^66",["^J",["^6>","^65"]],"^9",111,"^5[",2,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U","^6M"]]]]]],"~$mandatory-interceptor-keys",["^ ","^K","^2L","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"^64","~$cljs.core/ISet"],"~$interceptor?",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^5S",["^16",["^5T",["^16",[["~$m"]]]]]],"^K","^2C","^6","re_frame/interceptor.cljc","^:",19,"^60",["^16",[["~$m"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",11,"^66","~$boolean","^9",11,"^5[",1,"^67",true,"^5S",["^16",["^5T",["^16",[["~$m"]]]]]],"~$change-direction",["^ ","^5R",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^69",true,"^5S",["^16",["^5T",["^16",[["^5U"]]]]],"^6;","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^69",true,"^K","^2=","^6","re_frame/interceptor.cljc","^:",24,"^60",["^16",[["^5U"]]],"^62",null,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^7",132,"^66",["^J",["^6>","^65"]],"^9",132,"^5[",1,"^67",true,"^5S",["^16",["^5T",["^16",[["^5U"]]]]],"^6;","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^5U",["^ ","^5R",null,"^5",["^ ","^69",true,"^6","re_frame/interceptor.cljc","^:",15,"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["~$event","^6M"],["^6U","^6M","~$db"]],"^5S",["^16",[["^6U","^6M"],["^6U","^6M","^6V"]]],"^61",["^16",[null,null]]],"^8",8,"^7",118,"^9",118,"^5S",["^16",["^5T",["^16",[["^6U","^6M"],["^6U","^6M","^6V"]]]]],"^6;","Create a fresh context"],"^69",true,"^K","^1L","^6","re_frame/interceptor.cljc","^:",15,"^5X",["^ ","^5Y",false,"^5Z",3,"^5[",3,"^60",[["^6U","^6M"],["^6U","^6M","^6V"]],"^5S",["^16",[["^6U","^6M"],["^6U","^6M","^6V"]]],"^61",["^16",[null,null]]],"^60",[["^6U","^6M"],["^6U","^6M","^6V"]],"^62",null,"^5Z",3,"^61",["^16",[null,null]],"^8",1,"^5Y",false,"^63",[["^ ","^5Z",2,"^5Y",false,"^64",["^J",["^6>","^65"]]],["^ ","^5Z",3,"^5Y",false,"^64",["^J",["^6>","^65"]]]],"^7",118,"^9",118,"^5[",3,"^67",true,"^5S",["^16",[["^6U","^6M"],["^6U","^6M","^6V"]]],"^6;","Create a fresh context"]],"^14",["^ ","^T","^T","^U","^T","^X","^X"],"~:cljs.analyzer/constants",["^ ","^Z",["^J",["~:unnamed","~:tags","~:original-event","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^72","^73","^79","^76","^6X","^74","^77","^70","^75","^71","^6Z","^6[","^6Y","^78"]],"^1;",["^ ","^[",["^J",[]]],"^1<",["^ "],"^1=",["^Y","^X","^R","^S","^T","^V"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2N",[["^7=","~:static-fns"],true,["^7=","~:shadow-tweaks"],null,["^7=","~:source-map-inline"],null,["^7=","~:elide-asserts"],true,["^7=","~:optimize-constants"],null,["^7=","^1B"],null,["^7=","~:external-config"],null,["^7=","~:tooling-config"],null,["^7=","~:emit-constants"],null,["^7=","~:load-tests"],false,["^7=","~:form-size-threshold"],null,["^7=","~:global-goog-object&array"],null,["^7=","~:data-readers"],null,["^7=","~:infer-externs"],"~:auto",["^7=","^1D"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^7=","~:fn-invoke-direct"],null,["^7=","~:source-map"],null]]]