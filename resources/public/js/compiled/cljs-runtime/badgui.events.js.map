{"version":3,"sources":["badgui/events.cljs"],"mappings":"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","names":["p__27984","map__27985","cljs.core/--destructure-map","cljs.core.get","badgui.events/websocket-effect","request","uri","on-message","on-error","on-success","on-failure","existing-websocket","re-frame.core/dispatch","cljs.core.conj","websocket","js/WebSocket","p1__27981#","p1__27982#","p1__27983#","badgui.events/temp","badgui.events/parselive","input","s","cljs.core/rest","cljs.core.take_nth","badgui.events/xsplayed","data","name","sym","cljs.core/count","p1__27986#","cljs.core.filter","cljs.core._EQ_","badgui.events/filltemp","cljs.core.assoc","cljs.core/second","cljs.core.nth","cljs.core/assoc-in","badgui.events/relevantdata","p1__27987#","re-frame.core/reg-fx","re_frame.core.reg_event_fx","_","re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__27870__auto__","result__27877__auto__","day8.re-frame.debux.common.util/send-trace!","e","e27988","badgui.db/default-db","p__27989","vec__27990","db","val","p__27993","map__27994","ajax.core/json-response-format","p__27995","vec__27996","d","cljs.core.js__GT_clj","js/JSON","p__27999","vec__28000","p__28003","vec__28004","p__28007","vec__28008","message","msg","p__28011","vec__28012","p__28015","vec__28016","cljs.core.keyword","p__28019","vec__28020","cljs.core/not","cljs.core.get_in","p__28023","vec__28024","cljs.core.update_in","cljs.core/dissoc","p__28027","p__28028","map__28029","vec__28030","p__28033","vec__28034","rd","numof","cljs.core/key","cljs.core.apply","cljs.core/max-key","cljs.core/val"],"sourcesContent":["(ns badgui.events\r\n  (:require\r\n   [re-frame.core :as re-frame]\r\n   [badgui.db :as db]\r\n   [day8.re-frame.http-fx]\r\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\r\n   [ajax.core :as ajax]\r\n   ))\r\n\r\n(defn websocket-effect\r\n  [{:as request\r\n    :keys [uri on-message on-error on-success on-failure existing-websocket]}]\r\n  (if existing-websocket\r\n    (re-frame/dispatch (conj on-success existing-websocket))\r\n    (let [websocket (js/WebSocket. uri)]\r\n      (set! (.-onmessage websocket) #(re-frame/dispatch (conj on-message %)))\r\n      (set! (.-onerror websocket) #(re-frame/dispatch (conj on-failure %)))\r\n      (set! (.-onopen websocket) (fn on-open []\r\n                                   (set! (.-onerror websocket) #(re-frame/dispatch (conj on-error %)))\r\n                                   (re-frame/dispatch (conj on-success websocket)))))))\r\n\r\n(def temp {:type nil\r\n           :gameId nil\r\n           :t nil\r\n           :playerA {:name nil\r\n                     :played nil}\r\n           :playerB {:name nil\r\n                     :played nil}})\r\n\r\n(defn parselive [input]\r\n  (as-> input s\r\n        (rest (.split s \"\\\"\"))\r\n        (take-nth 2 s)\r\n        ))\r\n\r\n(defn xsplayed [data name sym]\r\n  (count\r\n    (filter #(or (and (= (:played (:playerA %)) sym)\r\n                      (= (:name (:playerA %)) name))\r\n                 (and (= (:played (:playerA %)) sym)\r\n                      (= (:name (:playerA %)) name)))\r\n         data)))\r\n\r\n\r\n(defn filltemp [data]\r\n      (-> temp\r\n          (assoc :type (second data)\r\n                 :gameId (nth data 3))\r\n          (assoc-in [:playerA :name] (nth data 6))\r\n          (assoc-in [:playerB :name] (nth data 9))))\r\n\r\n(defn relevantdata [data name]\r\n  (filter #(or (= name (:name (:playerA %)))\r\n               (= name (:name (:playerB %))))\r\n          data))\r\n\r\n\r\n(re-frame/reg-fx :websocket websocket-effect)\r\n\r\n(re-frame/reg-event-fx\r\n ::connect-websocket\r\n (fn [_ _]\r\n   {:websocket {:method :get\r\n                :uri \"wss://bad-api-assignment.reaktor.com/rps/live\"\r\n                :on-message [::msg-handler]\r\n                :on-success [:websocket-success]\r\n                :on-failure [:websocket-failure]}}))\r\n\r\n(re-frame/reg-event-db\r\n ::initialize-db\r\n (fn-traced [_ _]\r\n   (-> db/default-db\r\n       (assoc :connecting true))))\r\n\r\n(re-frame/reg-event-db\r\n  ::update-name\r\n    (fn [db [_ val]]\r\n      (assoc db :name val)))\r\n\r\n(re-frame/reg-event-fx                             ;; note the trailing -fx\r\n  ::fetch-results                      ;; usage:  (dispatch [:handler-with-http])\r\n  (fn [{:keys [db]} _]                    ;; the first param will be \"world\"\r\n    {:db   (assoc db :loading true)   ;; causes the twirly-waiting-dialog to show??\r\n     :http-xhrio {:method          :get\r\n                  :uri             \"http://localhost:8080/history\"\r\n                  :timeout         8000                                           ;; optional see API docs\r\n                  :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\r\n                  :on-success      [::fetch-results-success]\r\n                  :on-failure      [::fetch-results-failure]}}))\r\n\r\n(re-frame/reg-event-db\r\n ::fetch-results-success\r\n (fn [db [_ data]]\r\n   (let [d (js->clj (.parse js/JSON (:result data)) :keywordize-keys true)]\r\n     (-> db\r\n       (assoc :loading false)\r\n       (assoc :results (:data d))\r\n       (assoc :cursor  (second (.split (str (:cursor d)) \"=\")))))))\r\n\r\n(re-frame/reg-event-db\r\n ::fetch-results-failure\r\n (fn [db [_ data]]\r\n   (-> db\r\n      (assoc :loading false)\r\n      (assoc :name data))))\r\n\r\n(re-frame/reg-event-fx                             ;; note the trailing -fx\r\n  ::fetch-next                      ;; usage:  (dispatch [:handler-with-http])\r\n  (fn [_ [_ val]]                    ;; the first param will be \"world\"\r\n    {:http-xhrio {:method          :get\r\n                  :uri             (str \"http://localhost:8080/history/\" val)\r\n                  :timeout         8000                                           ;; optional see API docs\r\n                  :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\r\n                  :on-success      [::fetch-results-success]\r\n                  :on-failure      [::fetch-results-failure]}}))\r\n\r\n\r\n\r\n(re-frame/reg-event-fx\r\n ::msg-handler\r\n (fn [_ [_ message]]\r\n      (let [msg (parselive (.parse js/JSON (.-data message)))]\r\n            (if (= (second msg) \"GAME_BEGIN\")\r\n                (re-frame/dispatch [::add-ongoing msg])\r\n                (re-frame/dispatch [::update-handler msg])))))\r\n\r\n(re-frame/reg-event-fx\r\n ::update-handler\r\n (fn [_ [_ msg]]\r\n   {:fx [[:dispatch [::change-ongoing msg]]\r\n         [:dispatch-later {:ms 3000 :dispatch [::del-ongoing msg]}]]}))\r\n\r\n(re-frame/reg-event-db\r\n ::add-ongoing\r\n    (fn [db [_ data]]\r\n      (assoc-in db [:ongoing (keyword (nth data 3))]  (filltemp data))))\r\n\r\n(re-frame/reg-event-db\r\n ::change-ongoing\r\n (fn [db [_ data]]\r\n  (if-not (not (get-in db [:ongoing (keyword (nth data 3))]))\r\n      (-> db\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :type] (nth data 1))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :t] (nth data 5))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :playerA :played] (nth data 9))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :playerB :played] (nth data 14))))))\r\n\r\n(re-frame/reg-event-db\r\n ::del-ongoing\r\n (fn [db [_ data]]\r\n      (-> db\r\n        (update-in [:ongoing] dissoc (keyword (nth data 3))))))\r\n\r\n(re-frame/reg-event-fx\r\n ::boxit\r\n (fn [{:keys [db]} [_ name]]\r\n   {:db (assoc db :loading true)\r\n    :fx [[:dispatch [::box-calc name]]]}))\r\n\r\n(re-frame/reg-event-db\r\n ::box-calc\r\n\r\n (fn [db [_ name]]\r\n  (let [rd (relevantdata (:results db) name)\r\n        numof {\"Rock\" (xsplayed rd name \"ROCK\")\r\n                \"Paper\" (xsplayed rd name \"PAPER\")\r\n                \"Scissors\" (xsplayed rd name \"SCISSORS\")}]\r\n   (-> db\r\n       (assoc-in [:box :total] (count rd))\r\n       (assoc-in [:box :name] name)\r\n       (assoc-in [:box :most-played]  (key (apply max-key val numof)))\r\n       (assoc :loading false)))))\r\n"]}