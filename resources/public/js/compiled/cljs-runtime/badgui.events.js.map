{"version":3,"sources":["badgui/events.cljs"],"mappings":"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","names":["p__29174","map__29175","cljs.core/--destructure-map","cljs.core.get","badgui.events/websocket-effect","request","uri","on-message","on-error","on-success","on-failure","existing-websocket","re-frame.core/dispatch","cljs.core.conj","websocket","js/WebSocket","p1__29171#","p1__29172#","p1__29173#","badgui.events/temp","badgui.events/parselive","input","s","cljs.core/rest","cljs.core.take_nth","badgui.events/filltemp","data","cljs.core.assoc","cljs.core/second","cljs.core.nth","cljs.core/assoc-in","re-frame.core/reg-fx","re_frame.core.reg_event_fx","_","re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","day8.re-frame.debux.common.util/send-form!","result__27870__auto__","result__27877__auto__","day8.re-frame.debux.common.util/send-trace!","e","e29176","badgui.db/default-db","p__29177","vec__29178","vec__29181","db","val","p__29184","map__29185","ajax.core/json-response-format","p__29186","p__29187","map__29188","vec__29189","ajax.core/text-response-format","p__29192","vec__29193","handled","cljs.reader.read_string","cljs.core.dissoc","cljs.core/count","cljs.core.partition","p__29196","vec__29197","message","msg","js/JSON","cljs.core._EQ_","p__29200","vec__29201","p__29204","vec__29205","cljs.core.keyword","p__29208","vec__29209","ajax.core/json-request-format","p__29212","vec__29213","result","p__29216","vec__29217","cljs.core/not","cljs.core.get_in","p__29220","vec__29221","cljs.core.update_in","cljs.core/dissoc","p__29224","vec__29225","value","p__29228","vec__29229","cljs.core/+"],"sourcesContent":["(ns badgui.events\r\n  (:require\r\n   [re-frame.core :as re-frame]\r\n   [badgui.db :as db]\r\n   [day8.re-frame.http-fx]\r\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\r\n   [ajax.core :as ajax]\r\n   ))\r\n\r\n\r\n\r\n(defn websocket-effect\r\n  [{:as request\r\n    :keys [uri on-message on-error on-success on-failure existing-websocket]}]\r\n  (if existing-websocket\r\n    (re-frame/dispatch (conj on-success existing-websocket))\r\n    (let [websocket (js/WebSocket. uri)]\r\n      (set! (.-onmessage websocket) #(re-frame/dispatch (conj on-message %)))\r\n      (set! (.-onerror websocket) #(re-frame/dispatch (conj on-failure %)))\r\n      (set! (.-onopen websocket) (fn on-open []\r\n                                   (set! (.-onerror websocket) #(re-frame/dispatch (conj on-error %)))\r\n                                   (re-frame/dispatch (conj on-success websocket)))))))\r\n\r\n(def temp {:type nil\r\n           :gameId nil\r\n           :t nil\r\n           :playerA {:name nil\r\n                     :played nil}\r\n           :playerB {:name nil\r\n                     :played nil}})\r\n\r\n(defn parselive [input]\r\n  (as-> input s\r\n        (rest (.split s \"\\\"\"))\r\n        (take-nth 2 s)\r\n        ))\r\n\r\n(defn filltemp [data]\r\n      (-> temp\r\n          (assoc :type (second data)\r\n                 :gameId (nth data 3))\r\n          (assoc-in [:playerA :name] (nth data 6))\r\n          (assoc-in [:playerB :name] (nth data 9))))\r\n\r\n(re-frame/reg-fx :websocket websocket-effect)\r\n\r\n(re-frame/reg-event-fx\r\n ::connect-websocket\r\n (fn [_ _]\r\n   {:websocket {:method :get\r\n                :uri \"wss://bad-api-assignment.reaktor.com/rps/live\"\r\n                :on-message [::msg-handler]\r\n                :on-success [:websocket-success]\r\n                :on-failure [:websocket-failure]}}))\r\n\r\n(re-frame/reg-event-db\r\n ::initialize-db\r\n (fn-traced [_ _]\r\n   (-> db/default-db\r\n       (assoc :connecting true))))\r\n\r\n(re-frame/reg-event-db\r\n  ::fetch-results-succes\r\n    (fn [db [_ [val]]]\r\n      (assoc db :name val)))\r\n\r\n(re-frame/reg-event-fx                             ;; note the trailing -fx\r\n  ::fetch-results                      ;; usage:  (dispatch [:handler-with-http])\r\n  (fn [{:keys [db]} _]                    ;; the first param will be \"world\"\r\n    {:db   (assoc db :loading true)   ;; causes the twirly-waiting-dialog to show??\r\n     :http-xhrio {:method          :get\r\n                  :uri             (str \"http://localhost:8080/history\")\r\n                  :timeout         8000                                           ;; optional see API docs\r\n                  :response-format (ajax/json-response-format {:keywords? true})  ;; IMPORTANT!: You must provide this.\r\n                  :on-success      [::fetch-results-success]\r\n                  :on-failure      [::fetch-results-failure]}}))\r\n\r\n(re-frame/reg-event-fx\r\n  ::boxit\r\n  (fn [{:keys [db]} [_ val]]\r\n    {:db (assoc db :loading true)\r\n     :http-xhrio {:method          :get\r\n                  :uri             (str \"./box/\" val)\r\n                  :timeout         8000\r\n                  :params {:msg \"BOXBOXBOX\"}  ;; optional see API docs\r\n                  :response-format (ajax/text-response-format)  ;; IMPORTANT!: You must provide this.\r\n                  :on-success      [::box-handler]\r\n                  :on-failure      [::box-handler]}}))\r\n\r\n(re-frame/reg-event-db\r\n ::box-handler\r\n (fn [db [_ data]]\r\n   (let [handled (cljs.reader/read-string data)]\r\n      (-> db\r\n       (assoc-in [:box :show] true)\r\n       (dissoc :searchf)\r\n       (assoc :loading false)\r\n       (assoc :box  (dissoc handled :results))\r\n       (assoc :history (:results handled))\r\n       (assoc :pagenum {:max (count (partition 5 (:results handled)))\r\n                        :now 0})))))\r\n\r\n(re-frame/reg-event-db\r\n ::del-box\r\n (fn [db _]\r\n   (assoc-in db [:box :show] false)))\r\n\r\n(re-frame/reg-event-fx\r\n ::msg-handler\r\n (fn [_ [_ message]]\r\n   (let [msg (parselive (.parse js/JSON (.-data message)))]\r\n            (if (= (second msg) \"GAME_BEGIN\")\r\n                (re-frame/dispatch [::add-ongoing msg])\r\n                (re-frame/dispatch [::update-handler msg])))))\r\n\r\n(re-frame/reg-event-fx\r\n ::update-handler\r\n (fn [_ [_ msg]]\r\n   {:fx [[:dispatch [::change-ongoing msg]]\r\n         [:dispatch [::update-backend msg]]\r\n         [:dispatch-later {:ms 3000 :dispatch [::del-ongoing msg]}]]}))\r\n\r\n(re-frame/reg-event-db\r\n ::add-ongoing\r\n    (fn [db [_ data]]\r\n      (assoc-in db [:ongoing (keyword (nth data 3))]  (filltemp data))))\r\n\r\n(re-frame/reg-event-fx                             ;; note the trailing -fx\r\n  ::update-backend                      ;; usage:  (dispatch [:handler-with-http])\r\n  (fn [db [_ data]]                    ;; the first param will be \"world\"\r\n    {:http-xhrio {:method          :post\r\n                  :uri             (str \"./wsdata\"\r\n                                        #_(or (. (. js/process -env) -port)\r\n                                            \"8080\"))\r\n                  :params          {:gameId (nth data 3)\r\n                                    :t (nth data 5)\r\n                                     :playerA {:name (nth data 7)\r\n                                               :played (nth data 9)}\r\n                                     :playerB {:name (nth data 12)\r\n                                               :played (nth data 14)}}\r\n                  :timeout         5000\r\n                  :format          (ajax/json-request-format)\r\n                  :response-format (ajax/json-response-format {:keywords? true})\r\n                  :on-success      [::success-post-result]\r\n                  :on-failure      [::failure-post-result]}}))\r\n\r\n(re-frame/reg-event-db\r\n  ::failure-post-result\r\n  (fn [db [_ result]]\r\n    (assoc db :failure-http-result result)))\r\n\r\n(re-frame/reg-event-db\r\n ::change-ongoing\r\n (fn [db [_ data]]\r\n  (if-not (not (get-in db [:ongoing (keyword (nth data 3))]))\r\n      (-> db\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :type] (nth data 1))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :t] (nth data 5))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :playerA :played] (nth data 9))\r\n          (assoc-in [:ongoing (keyword (nth data 3)) :playerB :played] (nth data 14))))))\r\n\r\n(re-frame/reg-event-db\r\n ::del-ongoing\r\n (fn [db [_ data]]\r\n      (-> db\r\n        (update-in [:ongoing] dissoc (keyword (nth data 3))))))\r\n\r\n\r\n(re-frame/reg-event-db\r\n  ::update-search\r\n   (fn [db [_ value]]\r\n     (assoc db :searchf value)))\r\n\r\n(re-frame/reg-event-db\r\n ::pagenumber\r\n (fn [db [_ value]]\r\n   (update-in db [:pagenum :now] + value)))\r\n"]}